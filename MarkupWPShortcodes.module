<?php

/**
 * MarkupWPShortcodes
 *
 * MarkupWPShortcodes module for ProcessWire 2.4
 * 2014 by maks feltrin - pine3ree
 *
 * The WP shortcode rendering engine is now available in PW template files
 */

class MarkupWPShortcodes extends WireData implements Module
{
    const DEFAULT_DEFINITION_FILE = 'shortcodes/definitions.inc';

    protected $initialized = false;

    public static function getModuleInfo()
    {
        return array(
            'title'    => 'Markup WP Shortcodes',
            'version'  => 13,
            'summary'  => 'The WP shortcode rendering engine is now available in PW template files',
            'author'   => 'pine3ree',
            'href'     => 'https://github.com/pine3ree/MarkupWPShortcodes',
            'singular' => true,
            'autoload' => false,
        );
    }

    public function init()
    {
    }

    public function ___install()
    {
        if(version_compare(PHP_VERSION, '5.3.8', '<')) {
            throw new WireException("This module requires PHP 5.3.8 or newer.");
        }

        $pwVer = 100 * ProcessWire::versionMajor + 10 * ProcessWire::versionMinor + ProcessWire::versionRevision;

        if($pwVer < 240) {
            throw new WireException("This module requires ProcessWire 2.4.0 or newer.");
        }
    }

    /**
     * getter/setter for initialized property
     *
     * @param bool $status
     * @return bool|void
     */
    public function initialized($status = null)
    {
        if ($status === null) {
            return $this->initialized;
        } else {
            $this->initialized = (bool) $status;
        }
    }

    /**
     * Parse the content searching for shortcode tags and return the generated
     * html. Also loads the default shortcodes definition file if found.
     *
     * @param string $content
     * @return string
     */
    public function render($content)
    {
        if (!$this->initialized) {
            $this->load();
            $this->initialized = true;
        }

        $content = $this->cleanupBefore($content);

        return $this->doShortcode($content);
    }

    /**
     * Include a shortcode definition file.
     * Inside the file you can use $this->add('shortcodename', callback);
     *
     * @param string|null $definitionFile
     * @return \MarkupWPShortcodes
     * @throws WireException
     */
    public function load($definitionFile = null)
    {
        if (!$definitionFile) {
            $definitionFile = $this->wire('config')->paths->templates . self::DEFAULT_DEFINITION_FILE;
        }
        if (is_file($definitionFile)) {
            include_once $definitionFile;
        }

        return $this;
    }

    /**
     * Cleanup wrapping paragraphs before rendering shortcodes
     *
     * @param string|null $content
     * @return string
     */
    public function cleanupBefore($content = null)
    {
        if (!$content) return '';

        if (false === strpos( $content, '[' )) {
            return $content;
        }

        $content = preg_replace('/\<p\>(\&nbsp\;|\s)*\[([^\]]+)\](\&nbsp\;|\s)*\<\/p\>/i', '[$2]', $content);

        return $content;
    }

    /**
     * The following code is an adaptation of WP shortcode functions taken from
     * @package WordPress
     * @subpackage Shortcodes
     *
     * @link http://codex.wordpress.org/Shortcode_API
     */

    /**
     * WordPress API for creating bbcode like tags or what WordPress calls
     * "shortcodes." The tag and attribute parsing or regular expression code is
     * based on the Textpattern tag parser.
     *
     * A few examples are below:
     *
     * [shortcode /]
     * [shortcode foo="bar" baz="bing" /]
     * [shortcode foo="bar"]content[/shortcode]
     *
     * Shortcode tags support attributes and enclosed content, but does not entirely
     * support inline shortcodes in other shortcodes. You will have to call the
     * shortcode parser in your function to account for that.
     *
     * {@internal
     * Please be aware that the above note was made during the beta of WordPress 2.6
     * and in the future may not be accurate. Please update the note when it is no
     * longer the case.}}
     *
     * To apply shortcode tags to content:
     *
     * <code>
     * $shortcodes = $modules->get('MarkupWPShortcodes');
     * $out = $shortcodes->doShortcode($content);
     * </code>
     *
     * @link http://codex.wordpress.org/Shortcode_API
     *
     */

    /**
     * Container for storing shortcode tags and their hook to call for the shortcode
     *
     * @var $tags array
     */
    protected $tags = array();

    /**
     * Add hook for shortcode tag.
     *
     * There can only be one hook for each shortcode. Which means that if another
     * plugin has a similar shortcode, it will override yours or yours will override
     * theirs depending on which order the plugins are included and/or ran.
     *
     * Simplest example of a shortcode tag using the API:
     *
     * <code>
     * // [footag foo="bar"]
     *
     * $shortcodes = $modules->get('MarkupWPShortcodes');
     *
     * $shortcodes->add('footag', function ($atts) {
     *        return "foo = {$atts[foo]}";
     * });
     * </code>
     *
     * Example with nice attribute defaults:
     *
     * <code>
     * // [bartag foo="bar"]
     *
     * $shortcodes = $modules->get('MarkupWPShortcodes');
     *
     * $bartag = ;
     *
     *     return "foo = {$args['foo']}";
     * }
     * $shortcodes->add('bartag', function ($atts) use ($shortcode) {
     *     $args = $shortcode->attributes(array(
     *            'foo' => 'no foo',
     *         'baz' => 'default baz',
     *     ), $atts);
     * });
     * </code>
     *
     * Example with enclosed content:
     *
     * <code>
     * // [baztag]content[/baztag]
     *
     * $shortcodes = $modules->get('MarkupWPShortcodes');
     *
     * $this->add('baztag', function ($atts, $content='') {
     *     return "content = $content";
     * });
     * </code>
     *
     * @param string $tag Shortcode tag to be searched in post content.
     * @param callable $callable Hook to run when shortcode is found.
     */
    public function add($tag, $callable)
    {
        if (is_callable($callable)) {
            $this->tags[$tag] = $callable;
        }
    }

    /**
     * Removes hook for shortcode.
     *
     * @param string $tag shortcode tag to remove hook for.
     */
    public function remove($tag)
    {
        if (isset($this->tags[$tag]) || array_key_exists($tag, $this->tags)) {
            unset($this->tags[$tag]);
        }
    }

    /**
     * Clear all shortcodes.
     */
    public function removeAll() {
        $this->tags = array();
    }

    /**
     * Whether a registered shortcode exists named $tag
     *
     * @param string $tag
     * @return boolean
     */
    public function exists($tag)
    {
        return array_key_exists($tag, $this->tags);
    }

    /**
     * Whether the passed content contains the specified shortcode
     *
     * @param string $content Content to search for shortcodes
     * @param string $tag
     * @return boolean
     */
    public function hasShortcode($content, $tag)
    {
        if (false === strpos( $content, '[' )) {
            return false;
        }

        if ($this->exists($tag)) {
            preg_match_all('/' . $this->getShortcodeRegex() . '/s', $content, $matches, PREG_SET_ORDER);
            if (empty($matches)) {
                return false;
            }
            foreach ($matches as $shortcode) {
                if ($tag === $shortcode[2]) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Search content for shortcodes and filter shortcodes through their hooks.
     *
     * If there are no shortcode tags defined, then the content will be returned
     * without any filtering. This might cause issues when plugins are disabled but
     * the shortcode will still show up in the post or content.
     *
     * @uses $this->getShortcodeRegex() Gets the search pattern for searching shortcodes.
     *
     * @param string $content Content to search for shortcodes
     * @return string Content with shortcodes filtered out.
     */
    public function doShortcode($content)
    {
        if (false === strpos($content, '[' )) {
            return $content;
        }

        if (empty($this->tags) || !is_array($this->tags)) {
            return $content;
        }

        $pattern = $this->getShortcodeRegex();

        return preg_replace_callback( "/$pattern/s", array($this, 'doShortcodeTag') , $content );
    }

    /**
     * Retrieve the shortcode regular expression for searching.
     *
     * The regular expression combines the shortcode tags in the regular expression
     * in a regex class.
     *
     * The regular expression contains 6 different sub matches to help with parsing.
     *
     * 1 - An extra [ to allow for escaping shortcodes with double [[]]
     * 2 - The shortcode name
     * 3 - The shortcode argument list
     * 4 - The self closing /
     * 5 - The content of a shortcode when it wraps some content.
     * 6 - An extra ] to allow for escaping shortcodes with double [[]]
     *
     * @return string The shortcode search regular expression
     */
    public function getShortcodeRegex()
    {
        $tagnames = array_keys($this->tags);
        $tagregexp = join( '|', array_map('preg_quote', $tagnames) );

        // WARNING! Do not change this regex without changing $this->doShortcode_tag() and stripSortcodeTag()
        // Also, see shortcode_unautop() and shortcode.js.
        return
              '\\['                              // Opening bracket
            . '(\\[?)'                           // 1: Optional second opening bracket for escaping shortcodes: [[tag]]
            . "($tagregexp)"                     // 2: Shortcode name
            . '(?![\\w-])'                       // Not followed by word character or hyphen
            . '('                                // 3: Unroll the loop: Inside the opening shortcode tag
            .     '[^\\]\\/]*'                   // Not a closing bracket or forward slash
            .     '(?:'
            .         '\\/(?!\\])'               // A forward slash not followed by a closing bracket
            .         '[^\\]\\/]*'               // Not a closing bracket or forward slash
            .     ')*?'
            . ')'
            . '(?:'
            .     '(\\/)'                        // 4: Self closing tag ...
            .     '\\]'                          // ... and closing bracket
            . '|'
            .     '\\]'                          // Closing bracket
            .     '(?:'
            .         '('                        // 5: Unroll the loop: Optionally, anything between the opening and closing shortcode tags
            .             '[^\\[]*+'             // Not an opening bracket
            .             '(?:'
            .                 '\\[(?!\\/\\2\\])' // An opening bracket not followed by the closing shortcode tag
            .                 '[^\\[]*+'         // Not an opening bracket
            .             ')*+'
            .         ')'
            .         '\\[\\/\\2\\]'             // Closing shortcode tag
            .     ')?'
            . ')'
            . '(\\]?)';                          // 6: Optional second closing brocket for escaping shortcodes: [[tag]]
    }

    /**
     * Regular Expression callable for $this->doShortcode() for calling shortcode hook.
     * @see get_shortcode_regex for details of the match array contents.
     *
     * @param array $m Regular expression match array
     * @return mixed False on failure.
     */
    protected function doShortcodeTag($m)
    {
        // allow [[foo]] syntax for escaping a tag
        if ($m[1] == '[' && $m[6] == ']') {
            return substr($m[0], 1, -1);
        }

        $tag = $m[2];
        $attr = $this->parseAttributes($m[3]);

        if (isset($m[5])) {
            // enclosing tag - extra parameter
            return $m[1] . call_user_func($this->tags[$tag], $attr, $m[5], $tag ) . $m[6];
        } else {
            // self-closing tag
            return $m[1] . call_user_func($this->tags[$tag], $attr, null,  $tag ) . $m[6];
        }
    }

    /**
     * Retrieve all attributes from the shortcodes tag.
     *
     * The attributes list has the attribute name as the key and the value of the
     * attribute as the value in the key/value pair. This allows for easier
     * retrieval of the attributes, since all attributes have to be known.
     *
     * @param string $text
     * @return array List of attributes and their value.
     */
    public function parseAttributes($text)
    {
        $atts = array();
        $pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';
        $text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);
        if (preg_match_all($pattern, $text, $match, PREG_SET_ORDER)) {
            foreach ($match as $m) {
                if (!empty($m[1]))
                    $atts[strtolower($m[1])] = stripcslashes($m[2]);
                elseif (!empty($m[3]))
                    $atts[strtolower($m[3])] = stripcslashes($m[4]);
                elseif (!empty($m[5]))
                    $atts[strtolower($m[5])] = stripcslashes($m[6]);
                elseif (isset($m[7]) and strlen($m[7]))
                    $atts[] = stripcslashes($m[7]);
                elseif (isset($m[8]))
                    $atts[] = stripcslashes($m[8]);
            }
        } else {
            // !!COMMENTED OUT: I always want an array, if no match => return empty array
            //$atts = ltrim($text);
        }

        return $atts;
    }

    /**
     * Combine user attributes with known attributes and fill in defaults when needed.
     *
     * The pairs should be considered to be all of the attributes which are
     * supported by the caller and given as a list. The returned attributes will
     * only contain the attributes in the $pairs list.
     *
     * If the $atts list has unsupported attributes, then they will be ignored and
     * removed from the final returned list.
     *
     * @param array $pairs Entire list of supported attributes and their defaults.
     * @param array $atts User defined attributes in shortcode tag.
     * @return array Combined and filtered attribute list.
     */
    public function attributes($pairs, $atts)
    {
        $atts = (array) $atts;
        $out = array();
        foreach($pairs as $name => $default) {
            $out[$name] = array_key_exists($name, $atts) ? $atts[$name] : $default;
        }

        return $out;
    }

    /**
     * Remove all shortcode tags from the given content.
     *
     * @param string $content Content to remove shortcode tags.
     * @return string Content without shortcode tags.
     */
    public function stripShortcodes($content)
    {
        if (false === strpos( $content, '[' )) {
            return $content;
        }

        if (empty($this->tags) || !is_array($shortcode_tags)) {
            return $content;
        }

        $pattern = $this->getShortcodeRegex();

        return preg_replace_callback("/$pattern/s", array($this, 'stripSortcodeTag'), $content);
    }

    public function stripSortcodeTag($m)
    {
        // allow [[foo]] syntax for escaping a tag
        if ($m[1] == '[' && $m[6] == ']') {
            return substr($m[0], 1, -1);
        }

        return $m[1] . $m[6];
    }
}
